// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL.Models;

namespace Project.DAL.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Hebrew_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project.DAL.Models.City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("name");

                    b.HasKey("id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Project.DAL.Models.Expert", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("businessName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("businessName");

                    b.Property<int>("cityId")
                        .HasColumnType("int")
                        .HasColumnName("cityId");

                    b.Property<string>("description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("enable")
                        .HasColumnType("bit")
                        .HasColumnName("enable");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("imgUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imgUrl");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone");

                    b.Property<int>("proSubject")
                        .HasColumnType("int")
                        .HasColumnName("proSubject");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("userName");

                    b.Property<string>("userPassword")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("userPassword");

                    b.HasKey("id");

                    b.HasIndex("cityId");

                    b.HasIndex("proSubject");

                    b.ToTable("Expert");
                });

            modelBuilder.Entity("Project.DAL.Models.Meeting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("idProf")
                        .HasColumnType("int")
                        .HasColumnName("idProf");

                    b.Property<int>("idUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit")
                        .HasColumnName("isApproved");

                    b.Property<TimeSpan>("time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.HasKey("id");

                    b.HasIndex("idProf");

                    b.HasIndex("idUser");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Project.DAL.Models.Recommend", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("content");

                    b.Property<DateTime>("date_posted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit")
                        .HasColumnName("isApproved");

                    b.Property<int>("profId")
                        .HasColumnType("int")
                        .HasColumnName("profId");

                    b.Property<int>("stars")
                        .HasColumnType("int")
                        .HasColumnName("stars");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("id");

                    b.HasIndex("profId");

                    b.HasIndex("userId");

                    b.ToTable("Recommend");
                });

            modelBuilder.Entity("Project.DAL.Models.Subject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("parent")
                        .HasColumnType("int")
                        .HasColumnName("parent");

                    b.Property<string>("subName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subName");

                    b.HasKey("id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Project.DAL.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cityId")
                        .HasColumnType("int")
                        .HasColumnName("cityId");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("imgUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("imgUrl");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("userName");

                    b.Property<string>("userPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("userPassword");

                    b.Property<int>("userType")
                        .HasColumnType("int")
                        .HasColumnName("userType");

                    b.HasKey("id");

                    b.HasIndex("cityId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Project.DAL.Models.Expert", b =>
                {
                    b.HasOne("Project.DAL.Models.City", "City")
                        .WithMany("Experts")
                        .HasForeignKey("cityId")
                        .HasConstraintName("FK__Expert__cityId__619B8048")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.DAL.Models.Subject", "Subject")
                        .WithMany("Experts")
                        .HasForeignKey("proSubject")
                        .HasConstraintName("FK__Expert__proSubject__619B8048")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Project.DAL.Models.Meeting", b =>
                {
                    b.HasOne("Project.DAL.Models.Expert", "Expert")
                        .WithMany("Meetings")
                        .HasForeignKey("idProf")
                        .HasConstraintName("FK__Meetings__idProf__5812160E")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.DAL.Models.User", "User")
                        .WithMany("Meetings")
                        .HasForeignKey("idUser")
                        .HasConstraintName("FK__Meetings__idUser__59063A47")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.DAL.Models.Recommend", b =>
                {
                    b.HasOne("Project.DAL.Models.Expert", "Expert")
                        .WithMany("Recommends")
                        .HasForeignKey("profId")
                        .HasConstraintName("FK__Recommend__profId__5AEE82B9")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.DAL.Models.User", "User")
                        .WithMany("Recommends")
                        .HasForeignKey("userId")
                        .HasConstraintName("FK__Recommend__userId__5BE2A6F2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.DAL.Models.User", b =>
                {
                    b.HasOne("Project.DAL.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("cityId")
                        .HasConstraintName("FK__User__cityId__5DCAEF64")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Project.DAL.Models.City", b =>
                {
                    b.Navigation("Experts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project.DAL.Models.Expert", b =>
                {
                    b.Navigation("Meetings");

                    b.Navigation("Recommends");
                });

            modelBuilder.Entity("Project.DAL.Models.Subject", b =>
                {
                    b.Navigation("Experts");
                });

            modelBuilder.Entity("Project.DAL.Models.User", b =>
                {
                    b.Navigation("Meetings");

                    b.Navigation("Recommends");
                });
#pragma warning restore 612, 618
        }
    }
}
